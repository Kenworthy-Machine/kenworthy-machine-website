# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  globals(relativePath: String): Globals!
  globalsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GlobalsFilter): GlobalsConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
}

input DocumentFilter {
  globals: GlobalsFilter
  page: PageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Globals | Page | Folder

type GlobalsNavigationNavigationLinks {
  text: String
  url: [String]
}

type GlobalsNavigation {
  logo: String
  navigationLinks: [GlobalsNavigationNavigationLinks]
}

type GlobalsFooter {
  logo: String
  mailingAddress: JSON
  shippingAddress: JSON
  phone: String
  email: String
}

type Globals implements Node & Document {
  navigation: GlobalsNavigation
  footer: GlobalsFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input GlobalsNavigationNavigationLinksFilter {
  text: StringFilter
  url: StringFilter
}

input GlobalsNavigationFilter {
  logo: ImageFilter
  navigationLinks: GlobalsNavigationNavigationLinksFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input GlobalsFooterFilter {
  logo: ImageFilter
  mailingAddress: RichTextFilter
  shippingAddress: RichTextFilter
  phone: StringFilter
  email: StringFilter
}

input GlobalsFilter {
  navigation: GlobalsNavigationFilter
  footer: GlobalsFooterFilter
}

type GlobalsConnectionEdges {
  cursor: String!
  node: Globals
}

type GlobalsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalsConnectionEdges]
}

type PageBlocksHero {
  image: String
  heading: String
}

type PageBlocksValuesQuality1 {
  title: String
  description: JSON
}

type PageBlocksValuesQuality2 {
  title: String
  description: JSON
}

type PageBlocksValuesQuality3 {
  title: String
  description: JSON
}

type PageBlocksValues {
  backgroundImage: String
  title: String
  quality1: PageBlocksValuesQuality1
  quality2: PageBlocksValuesQuality2
  quality3: PageBlocksValuesQuality3
}

type PageBlocksLocation {
  content: JSON
}

type PageBlocksMachineCarouselMachineCard {
  image: String
  name: String
  description: JSON
  type: String
}

type PageBlocksMachineCarousel {
  sectionTitle: String
  buttonLabel: String
  machineCard: [PageBlocksMachineCarouselMachineCard]
}

union PageBlocks = PageBlocksHero | PageBlocksValues | PageBlocksLocation | PageBlocksMachineCarousel

type Page implements Node & Document {
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageBlocksHeroFilter {
  image: ImageFilter
  heading: StringFilter
}

input PageBlocksValuesQuality1Filter {
  title: StringFilter
  description: RichTextFilter
}

input PageBlocksValuesQuality2Filter {
  title: StringFilter
  description: RichTextFilter
}

input PageBlocksValuesQuality3Filter {
  title: StringFilter
  description: RichTextFilter
}

input PageBlocksValuesFilter {
  backgroundImage: ImageFilter
  title: StringFilter
  quality1: PageBlocksValuesQuality1Filter
  quality2: PageBlocksValuesQuality2Filter
  quality3: PageBlocksValuesQuality3Filter
}

input PageBlocksLocationFilter {
  content: RichTextFilter
}

input PageBlocksMachineCarouselMachineCardFilter {
  image: ImageFilter
  name: StringFilter
  description: RichTextFilter
  type: StringFilter
}

input PageBlocksMachineCarouselFilter {
  sectionTitle: StringFilter
  buttonLabel: StringFilter
  machineCard: PageBlocksMachineCarouselMachineCardFilter
}

input PageBlocksFilter {
  hero: PageBlocksHeroFilter
  values: PageBlocksValuesFilter
  location: PageBlocksLocationFilter
  machineCarousel: PageBlocksMachineCarouselFilter
}

input PageFilter {
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobals(relativePath: String!, params: GlobalsMutation!): Globals!
  createGlobals(relativePath: String!, params: GlobalsMutation!): Globals!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
}

input DocumentUpdateMutation {
  globals: GlobalsMutation
  page: PageMutation
  relativePath: String
}

input DocumentMutation {
  globals: GlobalsMutation
  page: PageMutation
}

input GlobalsNavigationNavigationLinksMutation {
  text: String
  url: [String]
}

input GlobalsNavigationMutation {
  logo: String
  navigationLinks: [GlobalsNavigationNavigationLinksMutation]
}

input GlobalsFooterMutation {
  logo: String
  mailingAddress: JSON
  shippingAddress: JSON
  phone: String
  email: String
}

input GlobalsMutation {
  navigation: GlobalsNavigationMutation
  footer: GlobalsFooterMutation
}

input PageBlocksHeroMutation {
  image: String
  heading: String
}

input PageBlocksValuesQuality1Mutation {
  title: String
  description: JSON
}

input PageBlocksValuesQuality2Mutation {
  title: String
  description: JSON
}

input PageBlocksValuesQuality3Mutation {
  title: String
  description: JSON
}

input PageBlocksValuesMutation {
  backgroundImage: String
  title: String
  quality1: PageBlocksValuesQuality1Mutation
  quality2: PageBlocksValuesQuality2Mutation
  quality3: PageBlocksValuesQuality3Mutation
}

input PageBlocksLocationMutation {
  content: JSON
}

input PageBlocksMachineCarouselMachineCardMutation {
  image: String
  name: String
  description: JSON
  type: String
}

input PageBlocksMachineCarouselMutation {
  sectionTitle: String
  buttonLabel: String
  machineCard: [PageBlocksMachineCarouselMachineCardMutation]
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  values: PageBlocksValuesMutation
  location: PageBlocksLocationMutation
  machineCarousel: PageBlocksMachineCarouselMutation
}

input PageMutation {
  blocks: [PageBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
