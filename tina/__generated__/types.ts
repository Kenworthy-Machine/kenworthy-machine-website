//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
export function gql(strings: TemplateStringsArray, ...args: string[]): string {
  let str = "";
  strings.forEach((string, i) => {
    str += string + (args[i] || "");
  });
  return str;
}
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends " $fragmentName" | "__typename" ? T[P] : never;
    };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any };
  JSON: { input: any; output: any };
};

export type SystemInfo = {
  __typename?: "SystemInfo";
  filename: Scalars["String"]["output"];
  title?: Maybe<Scalars["String"]["output"]>;
  basename: Scalars["String"]["output"];
  breadcrumbs: Array<Scalars["String"]["output"]>;
  path: Scalars["String"]["output"];
  relativePath: Scalars["String"]["output"];
  extension: Scalars["String"]["output"];
  template: Scalars["String"]["output"];
  collection: Collection;
};

export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type Folder = {
  __typename?: "Folder";
  name: Scalars["String"]["output"];
  path: Scalars["String"]["output"];
};

export type PageInfo = {
  __typename?: "PageInfo";
  hasPreviousPage: Scalars["Boolean"]["output"];
  hasNextPage: Scalars["Boolean"]["output"];
  startCursor: Scalars["String"]["output"];
  endCursor: Scalars["String"]["output"];
};

export type Node = {
  id: Scalars["ID"]["output"];
};

export type Document = {
  id: Scalars["ID"]["output"];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars["JSON"]["output"];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars["Float"]["output"];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: "Query";
  getOptimizedQuery?: Maybe<Scalars["String"]["output"]>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  globals: Globals;
  globalsConnection: GlobalsConnection;
  page: Page;
  pageConnection: PageConnection;
};

export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars["String"]["input"];
};

export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryNodeArgs = {
  id?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>;
  relativePath?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGlobalsArgs = {
  relativePath?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryGlobalsConnectionArgs = {
  before?: InputMaybe<Scalars["String"]["input"]>;
  after?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Float"]["input"]>;
  last?: InputMaybe<Scalars["Float"]["input"]>;
  sort?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GlobalsFilter>;
};

export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars["String"]["input"]>;
  after?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Float"]["input"]>;
  last?: InputMaybe<Scalars["Float"]["input"]>;
  sort?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PageFilter>;
};

export type DocumentFilter = {
  globals?: InputMaybe<GlobalsFilter>;
  page?: InputMaybe<PageFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: "DocumentConnectionEdges";
  cursor: Scalars["String"]["output"];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: "DocumentConnection";
  pageInfo: PageInfo;
  totalCount: Scalars["Float"]["output"];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: "Collection";
  name: Scalars["String"]["output"];
  slug: Scalars["String"]["output"];
  label?: Maybe<Scalars["String"]["output"]>;
  path: Scalars["String"]["output"];
  format?: Maybe<Scalars["String"]["output"]>;
  matches?: Maybe<Scalars["String"]["output"]>;
  templates?: Maybe<Array<Maybe<Scalars["JSON"]["output"]>>>;
  fields?: Maybe<Array<Maybe<Scalars["JSON"]["output"]>>>;
  documents: DocumentConnection;
};

export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars["String"]["input"]>;
  after?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Float"]["input"]>;
  last?: InputMaybe<Scalars["Float"]["input"]>;
  sort?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars["String"]["input"]>;
};

export type DocumentNode = Globals | Page | Folder;

export type GlobalsNavigationNavigationLinks = {
  __typename?: "GlobalsNavigationNavigationLinks";
  text?: Maybe<Scalars["String"]["output"]>;
  url?: Maybe<Array<Maybe<Scalars["String"]["output"]>>>;
};

export type GlobalsNavigation = {
  __typename?: "GlobalsNavigation";
  logo?: Maybe<Scalars["String"]["output"]>;
  navigationLinks?: Maybe<Array<Maybe<GlobalsNavigationNavigationLinks>>>;
};

export type GlobalsFooter = {
  __typename?: "GlobalsFooter";
  logo?: Maybe<Scalars["String"]["output"]>;
  mailingAddress?: Maybe<Scalars["JSON"]["output"]>;
  shippingAddress?: Maybe<Scalars["JSON"]["output"]>;
  phone?: Maybe<Scalars["String"]["output"]>;
  email?: Maybe<Scalars["String"]["output"]>;
};

export type Globals = Node &
  Document & {
    __typename?: "Globals";
    navigation?: Maybe<GlobalsNavigation>;
    footer?: Maybe<GlobalsFooter>;
    id: Scalars["ID"]["output"];
    _sys: SystemInfo;
    _values: Scalars["JSON"]["output"];
  };

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars["String"]["input"]>;
  eq?: InputMaybe<Scalars["String"]["input"]>;
  exists?: InputMaybe<Scalars["Boolean"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["String"]["input"]>>>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars["String"]["input"]>;
  eq?: InputMaybe<Scalars["String"]["input"]>;
  exists?: InputMaybe<Scalars["Boolean"]["input"]>;
  in?: InputMaybe<Array<InputMaybe<Scalars["String"]["input"]>>>;
};

export type GlobalsNavigationNavigationLinksFilter = {
  text?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type GlobalsNavigationFilter = {
  logo?: InputMaybe<ImageFilter>;
  navigationLinks?: InputMaybe<GlobalsNavigationNavigationLinksFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars["String"]["input"]>;
  eq?: InputMaybe<Scalars["String"]["input"]>;
  exists?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type GlobalsFooterFilter = {
  logo?: InputMaybe<ImageFilter>;
  mailingAddress?: InputMaybe<RichTextFilter>;
  shippingAddress?: InputMaybe<RichTextFilter>;
  phone?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
};

export type GlobalsFilter = {
  navigation?: InputMaybe<GlobalsNavigationFilter>;
  footer?: InputMaybe<GlobalsFooterFilter>;
};

export type GlobalsConnectionEdges = {
  __typename?: "GlobalsConnectionEdges";
  cursor: Scalars["String"]["output"];
  node?: Maybe<Globals>;
};

export type GlobalsConnection = Connection & {
  __typename?: "GlobalsConnection";
  pageInfo: PageInfo;
  totalCount: Scalars["Float"]["output"];
  edges?: Maybe<Array<Maybe<GlobalsConnectionEdges>>>;
};

export type PageBlocksHero = {
  __typename?: "PageBlocksHero";
  image?: Maybe<Scalars["String"]["output"]>;
  heading?: Maybe<Scalars["String"]["output"]>;
};

export type PageBlocksValuesQuality1 = {
  __typename?: "PageBlocksValuesQuality1";
  title?: Maybe<Scalars["String"]["output"]>;
  description?: Maybe<Scalars["JSON"]["output"]>;
};

export type PageBlocksValuesQuality2 = {
  __typename?: "PageBlocksValuesQuality2";
  title?: Maybe<Scalars["String"]["output"]>;
  description?: Maybe<Scalars["JSON"]["output"]>;
};

export type PageBlocksValuesQuality3 = {
  __typename?: "PageBlocksValuesQuality3";
  title?: Maybe<Scalars["String"]["output"]>;
  description?: Maybe<Scalars["JSON"]["output"]>;
};

export type PageBlocksValues = {
  __typename?: "PageBlocksValues";
  backgroundImage?: Maybe<Scalars["String"]["output"]>;
  title?: Maybe<Scalars["String"]["output"]>;
  quality1?: Maybe<PageBlocksValuesQuality1>;
  quality2?: Maybe<PageBlocksValuesQuality2>;
  quality3?: Maybe<PageBlocksValuesQuality3>;
};

export type PageBlocksLocation = {
  __typename?: "PageBlocksLocation";
  content?: Maybe<Scalars["JSON"]["output"]>;
};

export type PageBlocksMachineCarouselMachineCard = {
  __typename?: "PageBlocksMachineCarouselMachineCard";
  image?: Maybe<Scalars["String"]["output"]>;
  name?: Maybe<Scalars["String"]["output"]>;
  description?: Maybe<Scalars["JSON"]["output"]>;
  type?: Maybe<Scalars["String"]["output"]>;
};

export type PageBlocksMachineCarousel = {
  __typename?: "PageBlocksMachineCarousel";
  sectionTitle?: Maybe<Scalars["String"]["output"]>;
  buttonLabel?: Maybe<Scalars["String"]["output"]>;
  machineCard?: Maybe<Array<Maybe<PageBlocksMachineCarouselMachineCard>>>;
};

export type PageBlocks =
  | PageBlocksHero
  | PageBlocksValues
  | PageBlocksLocation
  | PageBlocksMachineCarousel;

export type Page = Node &
  Document & {
    __typename?: "Page";
    blocks?: Maybe<Array<Maybe<PageBlocks>>>;
    id: Scalars["ID"]["output"];
    _sys: SystemInfo;
    _values: Scalars["JSON"]["output"];
  };

export type PageBlocksHeroFilter = {
  image?: InputMaybe<ImageFilter>;
  heading?: InputMaybe<StringFilter>;
};

export type PageBlocksValuesQuality1Filter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
};

export type PageBlocksValuesQuality2Filter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
};

export type PageBlocksValuesQuality3Filter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
};

export type PageBlocksValuesFilter = {
  backgroundImage?: InputMaybe<ImageFilter>;
  title?: InputMaybe<StringFilter>;
  quality1?: InputMaybe<PageBlocksValuesQuality1Filter>;
  quality2?: InputMaybe<PageBlocksValuesQuality2Filter>;
  quality3?: InputMaybe<PageBlocksValuesQuality3Filter>;
};

export type PageBlocksLocationFilter = {
  content?: InputMaybe<RichTextFilter>;
};

export type PageBlocksMachineCarouselMachineCardFilter = {
  image?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  type?: InputMaybe<StringFilter>;
};

export type PageBlocksMachineCarouselFilter = {
  sectionTitle?: InputMaybe<StringFilter>;
  buttonLabel?: InputMaybe<StringFilter>;
  machineCard?: InputMaybe<PageBlocksMachineCarouselMachineCardFilter>;
};

export type PageBlocksFilter = {
  hero?: InputMaybe<PageBlocksHeroFilter>;
  values?: InputMaybe<PageBlocksValuesFilter>;
  location?: InputMaybe<PageBlocksLocationFilter>;
  machineCarousel?: InputMaybe<PageBlocksMachineCarouselFilter>;
};

export type PageFilter = {
  blocks?: InputMaybe<PageBlocksFilter>;
};

export type PageConnectionEdges = {
  __typename?: "PageConnectionEdges";
  cursor: Scalars["String"]["output"];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: "PageConnection";
  pageInfo: PageInfo;
  totalCount: Scalars["Float"]["output"];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: "Mutation";
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateGlobals: Globals;
  createGlobals: Globals;
  updatePage: Page;
  createPage: Page;
};

export type MutationAddPendingDocumentArgs = {
  collection: Scalars["String"]["input"];
  relativePath: Scalars["String"]["input"];
  template?: InputMaybe<Scalars["String"]["input"]>;
};

export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>;
  relativePath: Scalars["String"]["input"];
  params: DocumentUpdateMutation;
};

export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>;
  relativePath: Scalars["String"]["input"];
};

export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]["input"]>;
  relativePath: Scalars["String"]["input"];
  params: DocumentMutation;
};

export type MutationUpdateGlobalsArgs = {
  relativePath: Scalars["String"]["input"];
  params: GlobalsMutation;
};

export type MutationCreateGlobalsArgs = {
  relativePath: Scalars["String"]["input"];
  params: GlobalsMutation;
};

export type MutationUpdatePageArgs = {
  relativePath: Scalars["String"]["input"];
  params: PageMutation;
};

export type MutationCreatePageArgs = {
  relativePath: Scalars["String"]["input"];
  params: PageMutation;
};

export type DocumentUpdateMutation = {
  globals?: InputMaybe<GlobalsMutation>;
  page?: InputMaybe<PageMutation>;
  relativePath?: InputMaybe<Scalars["String"]["input"]>;
};

export type DocumentMutation = {
  globals?: InputMaybe<GlobalsMutation>;
  page?: InputMaybe<PageMutation>;
};

export type GlobalsNavigationNavigationLinksMutation = {
  text?: InputMaybe<Scalars["String"]["input"]>;
  url?: InputMaybe<Array<InputMaybe<Scalars["String"]["input"]>>>;
};

export type GlobalsNavigationMutation = {
  logo?: InputMaybe<Scalars["String"]["input"]>;
  navigationLinks?: InputMaybe<
    Array<InputMaybe<GlobalsNavigationNavigationLinksMutation>>
  >;
};

export type GlobalsFooterMutation = {
  logo?: InputMaybe<Scalars["String"]["input"]>;
  mailingAddress?: InputMaybe<Scalars["JSON"]["input"]>;
  shippingAddress?: InputMaybe<Scalars["JSON"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
};

export type GlobalsMutation = {
  navigation?: InputMaybe<GlobalsNavigationMutation>;
  footer?: InputMaybe<GlobalsFooterMutation>;
};

export type PageBlocksHeroMutation = {
  image?: InputMaybe<Scalars["String"]["input"]>;
  heading?: InputMaybe<Scalars["String"]["input"]>;
};

export type PageBlocksValuesQuality1Mutation = {
  title?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type PageBlocksValuesQuality2Mutation = {
  title?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type PageBlocksValuesQuality3Mutation = {
  title?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type PageBlocksValuesMutation = {
  backgroundImage?: InputMaybe<Scalars["String"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
  quality1?: InputMaybe<PageBlocksValuesQuality1Mutation>;
  quality2?: InputMaybe<PageBlocksValuesQuality2Mutation>;
  quality3?: InputMaybe<PageBlocksValuesQuality3Mutation>;
};

export type PageBlocksLocationMutation = {
  content?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type PageBlocksMachineCarouselMachineCardMutation = {
  image?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["JSON"]["input"]>;
  type?: InputMaybe<Scalars["String"]["input"]>;
};

export type PageBlocksMachineCarouselMutation = {
  sectionTitle?: InputMaybe<Scalars["String"]["input"]>;
  buttonLabel?: InputMaybe<Scalars["String"]["input"]>;
  machineCard?: InputMaybe<
    Array<InputMaybe<PageBlocksMachineCarouselMachineCardMutation>>
  >;
};

export type PageBlocksMutation = {
  hero?: InputMaybe<PageBlocksHeroMutation>;
  values?: InputMaybe<PageBlocksValuesMutation>;
  location?: InputMaybe<PageBlocksLocationMutation>;
  machineCarousel?: InputMaybe<PageBlocksMachineCarouselMutation>;
};

export type PageMutation = {
  blocks?: InputMaybe<Array<InputMaybe<PageBlocksMutation>>>;
};

export type GlobalsPartsFragment = {
  __typename: "Globals";
  navigation?: {
    __typename: "GlobalsNavigation";
    logo?: string | null;
    navigationLinks?: Array<{
      __typename: "GlobalsNavigationNavigationLinks";
      text?: string | null;
      url?: Array<string | null> | null;
    } | null> | null;
  } | null;
  footer?: {
    __typename: "GlobalsFooter";
    logo?: string | null;
    mailingAddress?: any | null;
    shippingAddress?: any | null;
    phone?: string | null;
    email?: string | null;
  } | null;
};

export type PagePartsFragment = {
  __typename: "Page";
  blocks?: Array<
    | {
        __typename: "PageBlocksHero";
        image?: string | null;
        heading?: string | null;
      }
    | {
        __typename: "PageBlocksValues";
        backgroundImage?: string | null;
        title?: string | null;
        quality1?: {
          __typename: "PageBlocksValuesQuality1";
          title?: string | null;
          description?: any | null;
        } | null;
        quality2?: {
          __typename: "PageBlocksValuesQuality2";
          title?: string | null;
          description?: any | null;
        } | null;
        quality3?: {
          __typename: "PageBlocksValuesQuality3";
          title?: string | null;
          description?: any | null;
        } | null;
      }
    | { __typename: "PageBlocksLocation"; content?: any | null }
    | {
        __typename: "PageBlocksMachineCarousel";
        sectionTitle?: string | null;
        buttonLabel?: string | null;
        machineCard?: Array<{
          __typename: "PageBlocksMachineCarouselMachineCard";
          image?: string | null;
          name?: string | null;
          description?: any | null;
          type?: string | null;
        } | null> | null;
      }
    | null
  > | null;
};

export type GlobalsQueryVariables = Exact<{
  relativePath: Scalars["String"]["input"];
}>;

export type GlobalsQuery = {
  __typename?: "Query";
  globals: {
    __typename: "Globals";
    id: string;
    _sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    navigation?: {
      __typename: "GlobalsNavigation";
      logo?: string | null;
      navigationLinks?: Array<{
        __typename: "GlobalsNavigationNavigationLinks";
        text?: string | null;
        url?: Array<string | null> | null;
      } | null> | null;
    } | null;
    footer?: {
      __typename: "GlobalsFooter";
      logo?: string | null;
      mailingAddress?: any | null;
      shippingAddress?: any | null;
      phone?: string | null;
      email?: string | null;
    } | null;
  };
};

export type GlobalsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars["String"]["input"]>;
  after?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Float"]["input"]>;
  last?: InputMaybe<Scalars["Float"]["input"]>;
  sort?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GlobalsFilter>;
}>;

export type GlobalsConnectionQuery = {
  __typename?: "Query";
  globalsConnection: {
    __typename?: "GlobalsConnection";
    totalCount: number;
    pageInfo: {
      __typename?: "PageInfo";
      hasPreviousPage: boolean;
      hasNextPage: boolean;
      startCursor: string;
      endCursor: string;
    };
    edges?: Array<{
      __typename?: "GlobalsConnectionEdges";
      cursor: string;
      node?: {
        __typename: "Globals";
        id: string;
        _sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        navigation?: {
          __typename: "GlobalsNavigation";
          logo?: string | null;
          navigationLinks?: Array<{
            __typename: "GlobalsNavigationNavigationLinks";
            text?: string | null;
            url?: Array<string | null> | null;
          } | null> | null;
        } | null;
        footer?: {
          __typename: "GlobalsFooter";
          logo?: string | null;
          mailingAddress?: any | null;
          shippingAddress?: any | null;
          phone?: string | null;
          email?: string | null;
        } | null;
      } | null;
    } | null> | null;
  };
};

export type PageQueryVariables = Exact<{
  relativePath: Scalars["String"]["input"];
}>;

export type PageQuery = {
  __typename?: "Query";
  page: {
    __typename: "Page";
    id: string;
    _sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    blocks?: Array<
      | {
          __typename: "PageBlocksHero";
          image?: string | null;
          heading?: string | null;
        }
      | {
          __typename: "PageBlocksValues";
          backgroundImage?: string | null;
          title?: string | null;
          quality1?: {
            __typename: "PageBlocksValuesQuality1";
            title?: string | null;
            description?: any | null;
          } | null;
          quality2?: {
            __typename: "PageBlocksValuesQuality2";
            title?: string | null;
            description?: any | null;
          } | null;
          quality3?: {
            __typename: "PageBlocksValuesQuality3";
            title?: string | null;
            description?: any | null;
          } | null;
        }
      | { __typename: "PageBlocksLocation"; content?: any | null }
      | {
          __typename: "PageBlocksMachineCarousel";
          sectionTitle?: string | null;
          buttonLabel?: string | null;
          machineCard?: Array<{
            __typename: "PageBlocksMachineCarouselMachineCard";
            image?: string | null;
            name?: string | null;
            description?: any | null;
            type?: string | null;
          } | null> | null;
        }
      | null
    > | null;
  };
};

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars["String"]["input"]>;
  after?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Float"]["input"]>;
  last?: InputMaybe<Scalars["Float"]["input"]>;
  sort?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PageFilter>;
}>;

export type PageConnectionQuery = {
  __typename?: "Query";
  pageConnection: {
    __typename?: "PageConnection";
    totalCount: number;
    pageInfo: {
      __typename?: "PageInfo";
      hasPreviousPage: boolean;
      hasNextPage: boolean;
      startCursor: string;
      endCursor: string;
    };
    edges?: Array<{
      __typename?: "PageConnectionEdges";
      cursor: string;
      node?: {
        __typename: "Page";
        id: string;
        _sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        blocks?: Array<
          | {
              __typename: "PageBlocksHero";
              image?: string | null;
              heading?: string | null;
            }
          | {
              __typename: "PageBlocksValues";
              backgroundImage?: string | null;
              title?: string | null;
              quality1?: {
                __typename: "PageBlocksValuesQuality1";
                title?: string | null;
                description?: any | null;
              } | null;
              quality2?: {
                __typename: "PageBlocksValuesQuality2";
                title?: string | null;
                description?: any | null;
              } | null;
              quality3?: {
                __typename: "PageBlocksValuesQuality3";
                title?: string | null;
                description?: any | null;
              } | null;
            }
          | { __typename: "PageBlocksLocation"; content?: any | null }
          | {
              __typename: "PageBlocksMachineCarousel";
              sectionTitle?: string | null;
              buttonLabel?: string | null;
              machineCard?: Array<{
                __typename: "PageBlocksMachineCarouselMachineCard";
                image?: string | null;
                name?: string | null;
                description?: any | null;
                type?: string | null;
              } | null> | null;
            }
          | null
        > | null;
      } | null;
    } | null> | null;
  };
};

export const GlobalsPartsFragmentDoc = gql`
  fragment GlobalsParts on Globals {
    __typename
    navigation {
      __typename
      logo
      navigationLinks {
        __typename
        text
        url
      }
    }
    footer {
      __typename
      logo
      mailingAddress
      shippingAddress
      phone
      email
    }
  }
`;
export const PagePartsFragmentDoc = gql`
  fragment PageParts on Page {
    __typename
    blocks {
      __typename
      ... on PageBlocksHero {
        image
        heading
      }
      ... on PageBlocksValues {
        backgroundImage
        title
        quality1 {
          __typename
          title
          description
        }
        quality2 {
          __typename
          title
          description
        }
        quality3 {
          __typename
          title
          description
        }
      }
      ... on PageBlocksLocation {
        content
      }
      ... on PageBlocksMachineCarousel {
        sectionTitle
        buttonLabel
        machineCard {
          __typename
          image
          name
          description
          type
        }
      }
    }
  }
`;
export const GlobalsDocument = gql`
  query globals($relativePath: String!) {
    globals(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...GlobalsParts
    }
  }
  ${GlobalsPartsFragmentDoc}
`;
export const GlobalsConnectionDocument = gql`
  query globalsConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: GlobalsFilter
  ) {
    globalsConnection(
      before: $before
      after: $after
      first: $first
      last: $last
      sort: $sort
      filter: $filter
    ) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...GlobalsParts
        }
      }
    }
  }
  ${GlobalsPartsFragmentDoc}
`;
export const PageDocument = gql`
  query page($relativePath: String!) {
    page(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...PageParts
    }
  }
  ${PagePartsFragmentDoc}
`;
export const PageConnectionDocument = gql`
  query pageConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: PageFilter
  ) {
    pageConnection(
      before: $before
      after: $after
      first: $first
      last: $last
      sort: $sort
      filter: $filter
    ) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...PageParts
        }
      }
    }
  }
  ${PagePartsFragmentDoc}
`;
export type Requester<C = {}> = <R, V>(
  doc: DocumentNode,
  vars?: V,
  options?: C,
) => Promise<R>;
export function getSdk<C>(requester: Requester<C>) {
  return {
    globals(
      variables: GlobalsQueryVariables,
      options?: C,
    ): Promise<{
      data: GlobalsQuery;
      errors?: {
        message: string;
        locations: { line: number; column: number }[];
        path: string[];
      }[];
      variables: GlobalsQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GlobalsQuery;
          errors?: {
            message: string;
            locations: { line: number; column: number }[];
            path: string[];
          }[];
          variables: GlobalsQueryVariables;
          query: string;
        },
        GlobalsQueryVariables
      >(GlobalsDocument, variables, options);
    },
    globalsConnection(
      variables?: GlobalsConnectionQueryVariables,
      options?: C,
    ): Promise<{
      data: GlobalsConnectionQuery;
      errors?: {
        message: string;
        locations: { line: number; column: number }[];
        path: string[];
      }[];
      variables: GlobalsConnectionQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GlobalsConnectionQuery;
          errors?: {
            message: string;
            locations: { line: number; column: number }[];
            path: string[];
          }[];
          variables: GlobalsConnectionQueryVariables;
          query: string;
        },
        GlobalsConnectionQueryVariables
      >(GlobalsConnectionDocument, variables, options);
    },
    page(
      variables: PageQueryVariables,
      options?: C,
    ): Promise<{
      data: PageQuery;
      errors?: {
        message: string;
        locations: { line: number; column: number }[];
        path: string[];
      }[];
      variables: PageQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: PageQuery;
          errors?: {
            message: string;
            locations: { line: number; column: number }[];
            path: string[];
          }[];
          variables: PageQueryVariables;
          query: string;
        },
        PageQueryVariables
      >(PageDocument, variables, options);
    },
    pageConnection(
      variables?: PageConnectionQueryVariables,
      options?: C,
    ): Promise<{
      data: PageConnectionQuery;
      errors?: {
        message: string;
        locations: { line: number; column: number }[];
        path: string[];
      }[];
      variables: PageConnectionQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: PageConnectionQuery;
          errors?: {
            message: string;
            locations: { line: number; column: number }[];
            path: string[];
          }[];
          variables: PageConnectionQueryVariables;
          query: string;
        },
        PageConnectionQueryVariables
      >(PageConnectionDocument, variables, options);
    },
  };
}
export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
  options?: { branch?: string },
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: { branch?: string },
    client,
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl;
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf("/");
      url = client.apiUrl.substring(0, index + 1) + options.branch;
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    });

    return {
      data: data?.data,
      errors: data?.errors,
      query: doc,
      variables: vars || {},
    };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      }),
    ),
  );

export const queries = (
  client: TinaClient,
  options?: {
    branch?: string;
  },
) => {
  const requester = generateRequester(client, options);
  return getSdk(requester);
};
